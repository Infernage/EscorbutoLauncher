package elr.gui;

import com.google.gson.Gson;
import elr.core.Loader;
import elr.core.util.Directory;
import elr.core.util.IO;
import elr.core.util.Util;
import elr.minecraft.modpacks.ModPack;
import elr.minecraft.modpacks.ModPackList;
import elr.minecraft.versions.CompleteVersion;
import elr.minecraft.versions.Version;
import elr.minecraft.versions.VersionList;
import elr.modules.compressor.Compressor;
import elr.modules.threadsystem.DownloadJob;
import elr.modules.threadsystem.Downloader;
import elr.modules.threadsystem.ThreadPool;
import elr.profiles.Profile;
import elr.profiles.Instances;
import java.io.File;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Future;
import javax.swing.DefaultListModel;

/**
 *
 * @author Infernage
 */
public class InstanceForm extends javax.swing.JDialog {
    private Profile profile;
    private VersionList versions;
    private ModPackList modpacks;

    /**
     * Creates new form InstanceForm
     */
    public InstanceForm(java.awt.Frame parent, boolean modal, Profile profile) {
        super(parent, modal);
        initComponents();
        this.profile = profile;
        versions = Loader.getVersionList();
        modpacks = Loader.getModPackList();
        DefaultListModel model = new DefaultListModel();
        if (versions == null){
            model.addElement("No versions found");
        } else{
            String latest = versions.getLatestVersion().get("release");
            model.addElement(latest);
            for (Version version : versions.getVersionList()) {
                if (version.getType().equals("release") && !version.getId().equalsIgnoreCase(latest)) 
                    model.addElement(version.getId());
            }
        }
        versionList.setModel(model);
        model = new DefaultListModel();
        if (modpacks == null){
            model.addElement("No modpacks found");
        } else{
            for (String title : modpacks.getLatestModPacks().keySet()) {
                model.addElement(title + " V" + modpacks.getLatestModPacks().get(title).getVersion() + 
                        " MC" + modpacks.getLatestModPacks().get(title).getMinecraftVersion());
            }
        }
        modpackList.setModel(model);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        versionList = new javax.swing.JList();
        installVersion = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        modpackList = new javax.swing.JList();
        installModPack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Instance installer");
        setResizable(false);

        versionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(versionList);

        installVersion.setText("Install");
        installVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installVersionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(installVersion)
                .addContainerGap(258, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(installVersion)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Minecraft versions", jPanel1);

        modpackList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(modpackList);

        installModPack.setText("Install");
        installModPack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installModPackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(installModPack)
                .addContainerGap(258, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(installModPack)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ModPacks", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void installVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installVersionActionPerformed
        // TODO add your handling code here:
        final String mc_version = (String) versionList.getSelectedValue();
        if (mc_version == null) return;
        if (mc_version.equals("No versions found")) return;
        if (!Util.checkPermission(profile)) return;
        String name = Util.checkInstanceName("MC V" + mc_version, profile.getPath());
        final File namePath = new File(profile.getPath(), name);
        namePath.mkdirs();
        ThreadPool.getInstance().execute(new Runnable() {

            @Override
            public void run() {
                try {
                    File target = new File(namePath, "assets");
                    File source = new File(Directory.minecraftResources());
                    Loader.getMainGui().getConsoleTab().println("Importing assets...");
                    try {
                        IO.copyDirectory(source, target);
                    } catch (Exception e) {
                        Loader.getMainGui().getConsoleTab().printErr(e, "Failed to import assets", 3, 
                                this.getClass());
                        throw e;
                    }
                    Loader.getMainGui().getConsoleTab().println("Assets imported");
                    Loader.getMainGui().getConsoleTab().println("Downloading version. Please wait...");
                    DownloadJob job = new DownloadJob(namePath.getName(), Loader.getMainGui()
                            .getProgressBar());
                    CompleteVersion version = new Gson().fromJson(Util.requestGetMethod(Util
                            .getCompleteVersionJson(mc_version)), CompleteVersion.class);
                    job.addListJobs(version.getRequiredDownloads(namePath, job));
                    job.addJob(new Downloader(new URL(Util.getMinecraftVersionJar(mc_version)), job, 
                            new File(namePath, "versions" + File.separator + mc_version + 
                            File.separator + mc_version + ".jar"), true, false));
                    job.startJob();
                    profile.addInstance(new Instances(namePath.getName(), namePath, version));
                    Loader.getMainGui().notifyListeners();
                    try {
                        Util.saveInstances(profile);
                    } catch (Exception e) {
                        //Ignore
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    IO.deleteDirectory(namePath);
                    namePath.delete();
                }
            }
        });
        Loader.getMainGui().setSelectedTab(3);
        this.dispose();
    }//GEN-LAST:event_installVersionActionPerformed

    private void installModPackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installModPackActionPerformed
        // TODO add your handling code here:
        final String modpack = (String) modpackList.getSelectedValue();
        if (modpack == null) return;
        if (modpack.equals("No modpacks found")) return;
        if (!Util.checkPermission(profile)) return;
        String name = Util.checkInstanceName(modpack, profile.getPath());
        final File namePath = new File(profile.getPath(), name);
        namePath.mkdirs();
        ThreadPool.getInstance().execute(new Runnable() {

            @Override
            public void run() {
                try {
                    Loader.getMainGui().getConsoleTab().println("Downloading ModPack. Please wait...");
                    DownloadJob job = new DownloadJob("Modpack installer", Loader.getMainGui()
                            .getProgressBar());
                    String title = null;
                    if (modpack.split(" ").length == 3){
                        title = modpack.split(" ")[0];
                    } else{
                        String[] split = modpack.split(" ");
                        int length = split.length - 2;
                        title = split[0];
                        for (int i = 1; i < length; i++) {
                            title = title + " " + split[i];
                        }
                    }
                    ModPack pack = modpacks.getLatestModPacks().get(title);
                    job.addJob(new Downloader(new URL(pack.getURL()), job, namePath, false, true));
                    List<Future<File>> file = job.startJob();
                    File decompressed = Compressor.secureDecompression(file.get(0).get(), null, true);
                    decompressed.renameTo(namePath);
                    file.get(0).get().delete();
                    IO.deleteDirectory(decompressed);
                    decompressed.delete();
                    Instances instance = new Instances(modpack, namePath, new Gson().fromJson(Util
                            .requestGetMethod(Util.getCompleteVersionJson(pack.getMinecraftVersion())),
                            CompleteVersion.class));
                    instance.setInfo(pack.getName() + " V" + pack.getVersion() + "\n" + 
                            pack.getInformation());
                    for (Map.Entry<String, String> entry : pack.getModPaths().entrySet()) {
                        String key = entry.getKey();
                        String value = entry.getValue();
                        if (value.startsWith("jars")){
                            instance.addMod(key, new File(namePath, value), Instances.JAR);
                        } else if (value.startsWith("coremods")){
                            instance.addMod(key, new File(namePath, value), Instances.CORE);
                        } else{
                            instance.addMod(key, new File(namePath, value), Instances.MOD);
                        }
                    }
                    profile.addInstance(instance);
                    Loader.getMainGui().notifyListeners();
                    try {
                        Util.saveInstances(profile);
                    } catch (Exception e) {
                        //Ignore
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    IO.deleteDirectory(namePath);
                    namePath.delete();
                }
            }
        });
        Loader.getMainGui().setSelectedTab(3);
        this.dispose();
    }//GEN-LAST:event_installModPackActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton installModPack;
    private javax.swing.JButton installVersion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList modpackList;
    private javax.swing.JList versionList;
    // End of variables declaration//GEN-END:variables
}
