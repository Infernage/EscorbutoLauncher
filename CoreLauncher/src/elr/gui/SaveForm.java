package elr.gui;

import elr.core.util.IO;
import elr.core.util.MessageControl;
import elr.core.util.Util;
import elr.modules.threadsystem.ThreadPool;
import elr.profiles.Instances;
import java.awt.Desktop;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;

/**
 *
 * @author Infernage
 */
public class SaveForm extends javax.swing.JDialog {
    private Instances selected;
    private volatile boolean isWorking = false;

    /**
     * Creates new form SaveForm
     */
    public SaveForm(java.awt.Frame parent, boolean modal, Instances instance) {
        super(parent, modal);
        initComponents();
        selected = instance;
        refreshList();
    }
    
    public boolean isWorking(){ return isWorking; }
    
    private void refreshList(){
        File saves = new File(selected.getPath(), "saves");
        DefaultListModel model = new DefaultListModel();
        if (!saves.exists()){
            savesList.setModel(model);
            return;
        }
        for (File file : saves.listFiles()) {
            if (file.isDirectory()) model.addElement(file.getName());
        }
        savesList.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        savesList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        folderButton = new javax.swing.JButton();
        status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Saved editor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        savesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(savesList);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export to XZ");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        folderButton.setText("View folder");
        folderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folderButtonActionPerformed(evt);
            }
        });

        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(folderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(folderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void folderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folderButtonActionPerformed
        // TODO add your handling code here:
        if (isWorking) return;
        File saves = new File(selected.getPath(), "saves" + (savesList.getSelectedValue() == null ? "" : 
                File.separator + savesList.getSelectedValue()));
        if (!saves.exists()){
            status.setText("Saves folder doesn't exist");
            return;
        }
        isWorking = true;
        try {
            Desktop.getDesktop().open(saves);
        } catch (Exception e) {
            e.printStackTrace();
        }
        isWorking = false;
    }//GEN-LAST:event_folderButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (isWorking) return;
        isWorking = true;
        File saves = new File(selected.getPath(), "saves");
        Util.importFileOrDirectory(saves, JFileChooser.FILES_AND_DIRECTORIES, 
                "Compressed XZ files(.cxz) or directories", "cxz", this);
        refreshList();
        isWorking = false;
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        if (savesList.getSelectedValue() == null || isWorking) return;
        isWorking = true;
        int i = MessageControl.showConfirmDialog("Are you sure to delete your save?", "Delete save", 0, 
                2);
        if (i != 0) return;
        File save = new File(selected.getPath(), "saves" + File.separator + savesList.getSelectedValue());
        IO.deleteDirectory(save);
        save.delete();
        refreshList();
        isWorking = false;
    }//GEN-LAST:event_removeButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add your handling code here:
        if (savesList.getSelectedValue() == null || isWorking) return;
        isWorking = true;
        exportButton.setEnabled(false);
        final JDialog dialog = this;
        status.setText("Exporting...");
        ThreadPool.getInstance().execute(new Runnable() {

            @Override
            public void run() {
                Util.exportFileOrDirectory(new File(selected.getPath(), "saves" + File.separator + 
                        savesList.getSelectedValue()), JFileChooser.FILES_ONLY, dialog);
                status.setText("");
                exportButton.setEnabled(true);
                isWorking = false;
            }
        });
    }//GEN-LAST:event_exportButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (isWorking) return;
        dispose();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton folderButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JList savesList;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
