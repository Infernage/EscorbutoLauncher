/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MLR.gui;

import MLR.InnerApi;
import java.awt.Cursor;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Arrays;
import javax.swing.JRootPane;

/**
 *
 * @author Reed
 */
public class Console extends javax.swing.JFrame {
    private Text text;
    private Buffer buf;
    private PrintStream Systemout;
    private StringBuilder key = new StringBuilder();
    /**
     * Creates new form Console
     */
    public Console() {
        setUndecorated(true);
        getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        if (InnerApi.configuration.getProperty("consoleMinimized").equals("true")){
            setExtendedState(Cursor.CROSSHAIR_CURSOR);
        }
        initComponents();
        Systemout = System.out;
        text = new Text(new ByteArrayOutputStream());
        System.setOut(text);
    }
    public void setInput(InputStream str){
        buf = new Buffer(str);
        buf.start();
        System.out.println("Set new Output");
    }
    private void salir(){
        text.salir();
    }
    public void exit(){
        this.jButton1ActionPerformed(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(jButton1)
                .addContainerGap(172, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.salir();
        System.setOut(Systemout);
        System.out.print("[==>Console disabled!<==] Text founded:\n" + jTextArea1.getText());
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        // TODO add your handling code here:
        key.append(evt.getKeyChar());
        if (key.toString().contains("DEBUG")){
            jTextArea1.append("\n\nERRORSTREAM:\n" + InnerApi.Init.error.err.toString());
            key.delete(0, key.capacity()-1);
        } else if (key.toString().contains("FORCEEXIT")){
            System.exit(1);
        }
        if (key.capacity() == 20){
            key.delete(0, key.capacity()-1);
        }
    }//GEN-LAST:event_jTextArea1KeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    private class Buffer extends Thread{
        private InputStream input;
        public Buffer(InputStream in){
            input = in;
        }
        public void run(){
            byte[] buffer = new byte[4096];
            String builder = "";
            try {
                while (input.read(buffer) > 0){
                    builder = builder + new String(buffer).replace("\r\n", "\n");
                    int nullInd = builder.indexOf(0);
                    if (nullInd != -1) builder = builder.substring(0, nullInd);
                    int line;
                    while ((line = builder.indexOf("\n")) != -1){
                        jTextArea1.append(builder.substring(0, line));
                        builder = builder.substring(line + 1);
                        jTextArea1.append("\n");
                    }
                    Arrays.fill(buffer, (byte) 0);
                    jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                }
            } catch (Exception e) {
                jTextArea1.append("[ERROR]" + e.getMessage());
            }
        }
    }
    private class Text extends PrintStream{
        private PrintStream out;
        private ByteArrayOutputStream output;
        public Text(OutputStream out){
            super(out);
        }
        public void salir(){
            this.close();
        }
        @Override
        public void println(String msg){
            jTextArea1.append(msg);
            jTextArea1.append("\n");
            jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
        }
        @Override
        public void println(){
            jTextArea1.append("\n");
            jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
        }
        @Override
        public void print(String msg){
            jTextArea1.append(msg);
            jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
        }
    }
}
